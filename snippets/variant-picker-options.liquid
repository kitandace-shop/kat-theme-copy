{%- comment -%}
  Renders text or color swatches for product values based on online inventory level.
  For a swatch created by collection, see `variant-picker-options--color.liquid` and `variant-picker-options--text.liquid`.

  Usage:
  {%- render 'variant-picker-options--color', value: group_product_value, url: group_product.url, target_product: group_product -%}
{%- endcomment -%}

{%- liquid
    assign variants_available_arr = ''
    assign variants_option1_arr   = product.variants | map: 'option1'
    assign variants_option2_arr   = product.variants | map: 'option2'
    assign variants_option3_arr   = product.variants | map: 'option3'
    assign swatches               = product.metafields.iamota.swatches.value

    for variant in product.variants
        assign online_inventory_level = variant.metafields.inventory_levels['66113274052'] | default: 0
        if online_inventory_level >= 1
            assign variants_available_arr = variants_available_arr | append: 'true,'
        else
            assign variants_available_arr = variants_available_arr | append: 'false,'
        endif
    endfor

    assign variants_available_arr = variants_available_arr | split: ','
-%}

{%- for value in option.values -%}
    {%- liquid
        assign option_disabled = true

        for option1_name in variants_option1_arr
            case option.position
            when 1
                if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0] == 'true'
                    assign option_disabled = false
                endif
            when 2
                if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0] == 'true'
                    assign option_disabled = false
                endif
            when 3
                if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0] == 'true'
                    assign option_disabled = false
                endif
            endcase
        endfor
    -%}
    {% if swatch_type == "text" or swatch_type == "color" %}

        <div class="swatch__option" data-swatch="{{ value }}">
            <input type="radio"
                data-single-option-selector
                id="Option{{ option.position }}-{{ value }}"
                value="{{ value | escape }}"
                name="options[{{ option.name }}]"
                data-index="option{{ option.position }}"
                class="sr-only {% if option_disabled %}swatch--disabled disabled{% endif %}"
                {% if option.selected_value == value %}checked{% endif %}
                {% if option_disabled %}disabled{% endif %}>
            <label for="Option{{ option.position }}-{{ value }}" class="form__option-label {% if option_disabled %}swatch--disabled disabled{% endif %}">
                <span class="form__option-label-inner form__option-label-inner-{{ value | handle }}"></span>
                <span class="form__option-label-visually-hidden">{{ value }}</span>
            </label>
        </div>
    {% else %}
        <option
            value="{{ value | escape }}"
            {% if option.selected_value == value %}selected="selected"{% endif %}
            {% if option_disabled %}disabled{% endif %}>
            {{ value }}
        </option>
    {% endif %}

{%- endfor -%}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const swatchOptions = document.querySelectorAll('.swatch__option');

        function getSelectedOptions() {
            const selectedOptions = {};
            document.querySelectorAll('[data-single-option-selector]:checked').forEach(input => {
                const optionIndex = input.getAttribute('data-index');
                selectedOptions[optionIndex] = input.value;
            });
            return selectedOptions;
        }

        function updateSwatchStates() {
            const selectedOptions = getSelectedOptions();
            const variants = JSON.parse('{{ product.variants | json }}'); // Get variant data as JSON
            const availableOptions = {};

            // Recalculate availability based on selected options
            variants.forEach(variant => {
                if (variant.available) {
                    let matches = true;
                    for (const [option, value] of Object.entries(selectedOptions)) {
                        if (variant[option] !== value) {
                            matches = false;
                            break;
                        }
                    }
                    if (matches) {
                        for (const option in variant) {
                            if (option.startsWith('option') && !availableOptions[option]) {
                                availableOptions[option] = [];
                            }
                            if (option.startsWith('option') && !availableOptions[option].includes(variant[option])) {
                                availableOptions[option].push(variant[option]);
                            }
                        }
                    }
                }
            });

            // Update the swatch states
            swatchOptions.forEach(swatch => {
                const input = swatch.querySelector('input');
                const label = swatch.querySelector('label');
                const optionIndex = input.getAttribute('data-index');
                const value = input.value;

                if (availableOptions[optionIndex] && availableOptions[optionIndex].includes(value)) {
                    input.disabled = false;
                    label.classList.remove('swatch--disabled', 'disabled');
                } else {
                    input.disabled = true;
                    label.classList.add('swatch--disabled', 'disabled');
                }
            });
        }

        // Reapply states when any swatch option div is clicked
        swatchOptions.forEach(swatch => {
            swatch.addEventListener('click', () => {
                // Delay to allow DOM updates
                setTimeout(updateSwatchStates, 50);
            });
        });

        // Initial state update on page load
        updateSwatchStates();
    });
</script>


  