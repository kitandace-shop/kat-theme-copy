{%- comment -%}
  Renders text or color swatches for product values based on online inventory level.
  For a swatch created by collection, see `variant-picker-options--color.liquid` and `variant-picker-options--text.liquid`.

  Usage:
  {%- render 'variant-picker-options--color', value: group_product_value, url: group_product.url, target_product: group_product -%}
{%- endcomment -%}

{%- liquid
    assign variants_available_arr = ''
    assign variants_option1_arr   = product.variants | map: 'option1'
    assign variants_option2_arr   = product.variants | map: 'option2'
    assign variants_option3_arr   = product.variants | map: 'option3'
    assign swatches               = product.metafields.iamota.swatches.value

    for variant in product.variants
        assign online_inventory_level = variant.metafields.inventory_levels['66113274052'] | default: 0
        if online_inventory_level >= 1
            assign variants_available_arr = variants_available_arr | append: 'true,'
        else
            assign variants_available_arr = variants_available_arr | append: 'false,'
        endif
    endfor

    assign variants_available_arr = variants_available_arr | split: ','
-%}

{%- for value in option.values -%}
    {%- liquid
        assign option_disabled = true
        assign variant_id = ''

        for variant in product.variants
            if variant.option1 == value or variant.option2 == value or variant.option3 == value
                assign variant_id = variant.id
                assign online_inventory_level = variant.metafields.inventory_levels['66113274052'] | default: 0
                if online_inventory_level >= 1
                    assign option_disabled = false
                    break
                endif
            endif
        endfor
    -%}
    {% if swatch_type == "text" or swatch_type == "color" %}
        <div class="swatch__option" 
             data-swatch="{{ value }}" 
             {% if swatch_type == "color" and variant_id %}
             data-url="{{ product.url | append: '?variant=' | append: variant_id }}"
             {% endif %}>
            <input type="radio"
                data-single-option-selector
                id="Option{{ option.position }}-{{ value }}"
                value="{{ value | escape }}"
                name="options[{{ option.name }}]"
                data-index="option{{ option.position }}"
                class="sr-only {% if option_disabled %}swatch--disabled disabled{% endif %}"
                {% if option.selected_value == value %}checked{% endif %}
                {% if option_disabled %}disabled{% endif %}>
            <label for="Option{{ option.position }}-{{ value }}" class="form__option-label {% if option_disabled %}swatch--disabled disabled{% endif %}">
                <span class="form__option-label-inner form__option-label-inner-{{ value | handle }}"></span>
                <span class="form__option-label-visually-hidden">{{ value }}</span>
            </label>
        </div>
    {% else %}
        <option
            value="{{ value | escape }}"
            {% if option.selected_value == value %}selected="selected"{% endif %}
            {% if option_disabled %}disabled{% endif %}>
            {{ value }}
        </option>
    {% endif %}
{%- endfor -%}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const swatchOptions = document.querySelectorAll('.swatch__option');

        function isColor(value) {
            const sizeValues = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
            return isNaN(value) && !sizeValues.includes(value);
        }

        swatchOptions.forEach(swatch => {
            const dataSwatch = swatch.getAttribute('data-swatch');
            const url = swatch.getAttribute('data-url'); // Fetch data-url
            console.log("RHRHR")
            if (true) {
                // Handle color swatch clicks
                console.log("TRUE")
                swatch.addEventListener('click', () => {
                    if (url) {
                        window.location.href = url; // Navigate
                    } else {
                        console.error('URL not found for swatch:', dataSwatch);
                    }
                });
            } else {
                console.log("False")
                // Handle non-color swatches
                swatch.addEventListener('click', () => {
                    setTimeout(() => {
                        const inputs = swatch.querySelectorAll('input');
                        inputs.forEach(input => {
                            if (input.disabled) {
                                input.closest('.swatch__option').classList.add('swatch--disabled', 'disabled');
                            } else {
                                input.closest('.swatch__option').classList.remove('swatch--disabled', 'disabled');
                            }
                        });
                    }, 50);
                });
            }
        });
    });
</script>
